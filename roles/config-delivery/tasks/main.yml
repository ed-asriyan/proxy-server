- name: Install rsync
  package:
    name: rsync
    state: present

- name: Create user
  user: name={{ user }}

- set_fact:
    static_root_local: "/tmp/{{ static_folder }}"

- name: Create static directory locally
  delegate_to: localhost
  become: false
  file:
    path: "{{ static_root_local }}"
    state: directory

- name: Render index.html
  delegate_to: localhost
  become: false
  template:
    src: index.html.j2
    dest: "{{ static_root_local }}/index.html"

- name: Render guide.html
  delegate_to: localhost
  become: false
  copy:
    src: guide.html
    dest: "{{ static_root_local }}/guide.html"

- name: Copy robots.txt
  delegate_to: localhost
  become: false
  copy:
    src: robots.txt
    dest: "{{ static_root_local }}/robots.txt"

- name: Include users variables
  include_vars:
    file: inventory/group_vars/all/users.yml

- set_fact:
    clients: "{{ users | dict2items | map(attribute='value') | flatten }}"

- name: Render configs
  delegate_to: localhost
  become: false
  template:
    src: config.json.j2
    dest: "{{ static_root_local }}/{{ item.uuid }}"
  with_items: "{{ clients }}"
  vars:
    secret: "{{ item.secret }}"
    prefix: "POST"
  no_log: true

- name: Synchronize local static root with remote host
  synchronize:
    src: "{{ static_root_local }}"
    dest: "/home/{{ user }}"
    recursive: yes
    archive: no
    checksum: yes
    delete: yes

- name: Remove local static root
  delegate_to: localhost
  become: false
  file:
    path: "{{ static_root_local }}"
    state: absent

- name: Render users URIs
  become: false
  delegate_to: localhost
  template:
    src: URIs.txt.j2
    dest: "URIs.txt"

- name: Get MD5 checksum of serve executable
  stat:
    path: "/home/{{ user }}/{{ executable_name }}"
    checksum_algorithm: md5
  register: file_stat

- name: Detect arch
  command: uname -m
  check_mode: no
  register: arch

- name: Download & extract serve executable
  when: "file_stat.stat.exists == false or file_stat.stat.checksum != downloads[arch.stdout].md5"
  unarchive:
    src: "{{ downloads[arch.stdout].url }}"
    dest: "/home/{{ user }}"
    remote_src: yes
    extra_opts:
      - "{{ executable_name }}"
  register: download

- name: Set executable ownership, group and permissions
  file:
    path: "/home/{{ user }}/{{ executable_name }}"
    group: "{{ user }}"
    owner: "{{ user }}"
    mode: "700"

- name: Copy private.key
  copy:
    src: private.pem
    dest: "/home/{{ user }}/{{ ssl_key_path }}"
    group: "{{ user }}"
    owner: "{{ user }}"
    mode: "600"
  register: ssl_private

- name: Copy certificate.crt
  copy:
    src: certificate.pem
    dest: "/home/{{ user }}/{{ ssl_cert_path }}"
    group: "{{ user }}"
    owner: "{{ user }}"
    mode: "600"
  register: ssl_cert

- name: Remove unexpected files in home
  include_tasks: tasks/remove-unexpected-files.yml
  vars:
    directory: "/home/{{ user }}"
    files:
      - "{{ static_folder }}"
      - "{{ executable_name }}"
      - "{{ ssl_cert_path }}"
      - "{{ ssl_key_path }}"

- name: Remove local source repository
  delegate_to: localhost
  become: false
  file:
    path: "{{ static_root_local }}"
    state: absent

- name: Render systemd service config
  template:
    src: config-delivery.service.j2
    dest: /etc/systemd/system/config-delivery.service
  register: systemd

- name: Reload daemon
  systemd:
    daemon_reload: yes
  when: systemd.changed

- name: Restart systemd app service
  systemd:
    name: config-delivery.service
    state: restarted
    enabled: yes
  when: systemd.changed or download.changed or ssl_private.changed or ssl_cert.changed
