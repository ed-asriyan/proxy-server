- name: Install rsync
  package:
    name: rsync
    state: present

- name: Create user
  user: name={{ frontman_user }}

- set_fact:
    static_root_local: "/tmp/{{ frontman_static_directory_filename }}"
    instruction_filename: "{{ lookup('community.general.random_string', length=32, special=False) }}.html"

- set_fact:
    instruction_url: "https://{{ frontman_domain }}:{{ frontman_port }}/{{ instruction_filename }}"

- name: Create static directory locally
  delegate_to: localhost
  become: false
  file:
    path: "{{ static_root_local }}"
    state: directory

- name: Render index.html
  delegate_to: localhost
  become: false
  template:
    src: index.html.j2
    dest: "{{ static_root_local }}/index.html"

- name: Render guide.html
  delegate_to: localhost
  become: false
  copy:
    src: guide.html
    dest: "{{ static_root_local }}/{{ instruction_filename }}"

- name: Copy robots.txt
  delegate_to: localhost
  become: false
  copy:
    src: robots.txt
    dest: "{{ static_root_local }}/robots.txt"

- name: Include users variables
  include_vars:
    file: inventory/group_vars/all/users.yml

- name: Render configs
  delegate_to: localhost
  become: false
  template:
    src: config.json.j2
    dest: "{{ static_root_local }}/{{ item.value }}"
  with_items: "{{ users | dict2items }}"
  loop_control:
    index_var: loop_index
  vars:
    user_uuid: "{{ item.value }}"
    default_server: "{{ servers[loop_index % (servers | length)] }}"

- name: Synchronize local static root with remote host
  synchronize:
    src: "{{ static_root_local }}"
    dest: "/home/{{ frontman_user }}"
    recursive: yes
    archive: no
    checksum: yes
    delete: yes

- name: Remove local static root
  delegate_to: localhost
  become: false
  file:
    path: "{{ static_root_local }}"
    state: absent

- name: Render users URIs
  become: false
  delegate_to: localhost
  template:
    src: URIs.txt.j2
    dest: "URIs.txt"

- name: Copy SSL key
  copy:
    src: "{{ ssl_key_path }}"
    dest: "{{ frontman_ssl_key_path }}"
    group: "{{ frontman_user }}"
    owner: "{{ frontman_user }}"
    mode: "600"
    remote_src: yes
  register: ssl_private

- name: Copy SSL certificate
  copy:
    src: "{{ ssl_cert_path }}"
    dest: "{{ frontman_ssl_cert_path }}"
    group: "{{ frontman_user }}"
    owner: "{{ frontman_user }}"
    mode: "600"
    remote_src: yes
  register: ssl_cert

- name: Remove unexpected files in home
  include_tasks: tasks/remove-unexpected-files.yml
  vars:
    directory: "/home/{{ frontman_user }}"
    files:
      - "{{ frontman_static_directory_filename }}"
      - "{{ frontman_ssl_cert_filename }}"
      - "{{ frontman_ssl_key_filename }}"

- name: Render nginx config
  template:
    src: nginx.conf.j2
    dest: "/home/{{ frontman_user }}/nginx.conf"
    group: "{{ frontman_user }}"
    owner: "{{ frontman_user }}"
    mode: "600"
  register: config

- name: Render systemd service config
  template:
    src: frontman.service.j2
    dest: /etc/systemd/system/frontman.service
  register: systemd

- name: Reload daemon
  systemd:
    daemon_reload: yes
  when: systemd.changed

- name: Restart systemd app service
  systemd:
    name: frontman.service
    state: restarted
    enabled: yes
  when: systemd.changed or config.changed or ssl_private.changed or ssl_cert.changed
