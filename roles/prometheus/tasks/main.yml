- name: Create user
  user: name={{ user }}

- name: Detect arch
  command: uname -m
  register: arch

- name: Know if the directory exists
  stat:
    path: "/home/{{ user }}/{{ downloads[arch.stdout].directory }}"
  register: file_stat

- name: Download & extract prometheus
  when: "file_stat.stat.exists == false"
  unarchive:
    src: "{{ downloads[arch.stdout].url }}"
    dest: "/home/{{ user }}"
    remote_src: yes
  register: download

- name: Set prometheus ownership, group and permissions
  file:
    path: "/home/{{ user }}/{{ downloads[arch.stdout].directory }}/{{ executable_name }}"
    group: "{{ user }}"
    owner: "{{ user }}"
    mode: "700"

- name: Copy private.key
  copy:
    src: private.key
    dest: "/home/{{ user }}/private.key"
    group: "{{ user }}"
    owner: "{{ user }}"
    mode: "600"
  register: ssl_private

- name: Copy certificate.crt
  copy:
    src: certificate.crt
    dest: "/home/{{ user }}/certificate.crt"
    group: "{{ user }}"
    owner: "{{ user }}"
    mode: "600"
  register: ssl_cert

- name: Render prometheus config
  template:
    src: config.yml.j2
    dest: "/home/{{ user }}/config.yml"
    group: "{{ user }}"
    owner: "{{ user }}"
    mode: "600"
  register: config

- name: Render web config
  template:
    src: web-config.yml.j2
    dest: "/home/{{ user }}/web-config.yml"
    group: "{{ user }}"
    owner: "{{ user }}"
    mode: "600"
  register: web

- name: Remove unmanaged files
  block:
    - name: List all files
      find:
        paths: "/home/{{ user }}"
      register: existing

    - name: Remove unmanaged files
      file:
        path: "{{ item.path }}"
        state: absent
      when: item.path|basename not in managed_files
      with_items: "{{ existing.files|default([ ]) }}"
      vars:
        managed_files:
          - web-config.yml
          - config.yml
          - certificate.crt
          - private.key
          - "{{ downloads[arch.stdout].directory }}"

- name: Render systemd service config
  template:
    src: prometheus.service.j2
    dest: /etc/systemd/system/prometheus.service
  register: systemd

- name: Reload daemon
  systemd:
    daemon_reload: yes
  when: systemd.changed

- name: Restart systemd app service
  systemd:
    name: prometheus.service
    state: restarted
    enabled: yes
  when: systemd.changed or download.changed or config.changed or web.changed or ssl_private.changed or ssl_cert.changed
