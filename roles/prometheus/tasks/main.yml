- name: Ensure required variables are defined
  assert:
    that:
      - prometheus_username is string
      - prometheus_password_bcrypt is string
      - prometheus_retention is string
      - prometheus_port is number
      - prometheus_remote is mapping
      - prometheus_remote.url is string
      - prometheus_remote.username is string
      - prometheus_remote.password is string
      - prometheus_domain is string

- name: Ensure prometheus_servers is defined correctly
  include_tasks: tasks/assert-servers.yml
  vars:
    servers: "{{ prometheus_servers }}"

- name: Create user
  user: name={{ prometheus_user }}

- name: Detect arch
  command: uname -m
  check_mode: no
  register: arch

- name: Know if the directory exists
  stat:
    path: "/home/{{ prometheus_user }}/{{ prometheus_downloads[arch.stdout].directory }}"
  register: file_stat

- name: Download & extract prometheus
  when: "file_stat.stat.exists == false"
  unarchive:
    src: "{{ prometheus_downloads[arch.stdout].url }}"
    dest: "/home/{{ prometheus_user }}"
    remote_src: yes
  register: download

- name: Set prometheus ownership, group and permissions
  file:
    path: "/home/{{ prometheus_user }}/{{ prometheus_downloads[arch.stdout].directory }}/{{ prometheus_executable_name }}"
    group: "{{ prometheus_user }}"
    owner: "{{ prometheus_user }}"
    mode: "700"

- name: Copy SSL key
  copy:
    content: "{{ prometheus_key }}"
    dest: "{{ prometheus_ssl_key_path }}"
    group: "{{ prometheus_user }}"
    owner: "{{ prometheus_user }}"
    mode: "600"
  register: ssl_private

- name: Copy SSL certificate
  copy:
    content: "{{ prometheus_certificate }}"
    dest: "{{ prometheus_ssl_cert_path }}"
    group: "{{ prometheus_user }}"
    owner: "{{ prometheus_user }}"
    mode: "600"
  register: ssl_cert

- name: Create directory for scrape targets certs
  file:
    path: "/home/{{ prometheus_user }}/{{ prometheus_scrape_ssl_certs_dir_name }}"
    state: directory

- name: Copy scrape targets SSL certificates
  copy:
    content: "{{ item.value.prometheus_metrics.tls.certificate }}"
    dest: "/home/{{ prometheus_user }}/{{ prometheus_scrape_ssl_certs_dir_name }}/{{ item.key }}-{{ prometheus_scrape_ssl_cert_filename_suffix }}"
    group: "{{ prometheus_user }}"
    owner: "{{ prometheus_user }}"
    mode: "600"
  with_dict: "{{ prometheus_servers }}"
  register: ssl_scrape_cert

- name: Remove unexpected files in directory for scrape targets certs
  include_tasks: tasks/remove-unexpected-files.yml
  vars:
    directory: "/home/{{ prometheus_user }}/{{ prometheus_scrape_ssl_certs_dir_name }}"
    files: "{{ prometheus_servers | dict2items | map(attribute='key') | map('regex_replace', '^(.*)$', '\\1-' + prometheus_scrape_ssl_cert_filename_suffix) | list }}"

- name: Render prometheus config
  template:
    src: config.yml.j2
    dest: "/home/{{ prometheus_user }}/config.yml"
    group: "{{ prometheus_user }}"
    owner: "{{ prometheus_user }}"
    mode: "600"
  register: config

- name: Render web config
  template:
    src: web-config.yml.j2
    dest: "/home/{{ prometheus_user }}/web-config.yml"
    group: "{{ prometheus_user }}"
    owner: "{{ prometheus_user }}"
    mode: "600"
  register: web

- name: Remove unexpected files in home
  include_tasks: tasks/remove-unexpected-files.yml
  vars:
    directory: "/home/{{ prometheus_user }}"
    files:
      - web-config.yml
      - config.yml
      - "{{ prometheus_ssl_cert_filename }}"
      - "{{ prometheus_ssl_key_filename }}"
      - "{{ prometheus_scrape_ssl_certs_dir_name }}"
      - "{{ prometheus_downloads[arch.stdout].directory }}"
      - data

- name: Render systemd service config
  template:
    src: prometheus.service.j2
    dest: /etc/systemd/system/prometheus.service
  register: systemd

- name: Reload daemon
  systemd:
    daemon_reload: yes
  when: systemd.changed

- name: Restart systemd app service
  systemd:
    name: prometheus.service
    state: restarted
    enabled: yes
  when: systemd.changed or download.changed or config.changed or web.changed or ssl_private.changed or ssl_cert.changed or ssl_scrape_cert.changed
