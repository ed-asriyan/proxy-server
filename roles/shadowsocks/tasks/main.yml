- name: Ensure required variables are defined
  assert:
    that:
      - shadowsocks_port is number
      - shadowsocks_listen_address is string
      - shadowsocks_metrics_port is number
      - shadowsocks_server_uuid is string

- name: Ensure shadowsocks_users is defined correctly
  include_tasks: tasks/assert-users.yml
  vars:
    users: "{{ shadowsocks_users }}"

- name: Ensure shadowsocks_server is defined correctly
  include_tasks: tasks/assert-server.yml
  vars:
    server: "{{ shadowsocks_server }}"

- name: Create user
  user: name={{ shadowsocks_user }}

- name: Get MD5 checksum of outline executable
  stat:
    path: "/home/{{ shadowsocks_user }}/{{ shadowsocks_executable_name }}"
    checksum_algorithm: md5
  register: file_stat

- name: Detect arch
  command: uname -m
  check_mode: no
  register: arch

- name: Download & extract outline executable
  when: "file_stat.stat.exists == false or file_stat.stat.checksum != shadowsocks_downloads[arch.stdout].md5"
  unarchive:
    src: "{{ shadowsocks_downloads[arch.stdout].url }}"
    dest: "/home/{{ shadowsocks_user }}"
    remote_src: yes
    extra_opts:
      - "{{ shadowsocks_executable_name }}"
  register: download

- name: Set executable ownership, group and permissions
  file:
    path: "/home/{{ shadowsocks_user }}/{{ shadowsocks_executable_name }}"
    group: "{{ shadowsocks_user }}"
    owner: "{{ shadowsocks_user }}"
    mode: "700"

- name: Render outline-ss-server config
  template:
    src: config.yml.j2
    dest: "/home/{{ shadowsocks_user }}/config.yml"
    group: "{{ shadowsocks_user }}"
    owner: "{{ shadowsocks_user }}"
    mode: "600"
  register: config

- name: Remove unexpected files in home
  include_tasks: tasks/remove-unexpected-files.yml
  vars:
    directory: "/home/{{ shadowsocks_user }}"
    files:
      - config.yml
      - "{{ shadowsocks_executable_name }}"

- name: Render systemd service config
  template:
    src: shadowsocks.service.j2
    dest: /etc/systemd/system/shadowsocks.service
  register: systemd

- name: Reload daemon
  systemd:
    daemon_reload: yes
  when: systemd.changed

- name: Restart systemd app service
  systemd:
    name: shadowsocks.service
    state: restarted
    enabled: yes
  when: systemd.changed or download.changed or config.changed
